# Generated by Django 5.0.4 on 2024-05-07 08:50

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="ConservationMeasures",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("measures", models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name="EndangeredStatus",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("status", models.CharField(max_length=300)),
            ],
        ),
        migrations.CreateModel(
            name="HeatMaps",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, null=True)),
                ("heatMap", models.JSONField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name="Images",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, null=True)),
                ("img", models.ImageField(null=True, upload_to="")),
            ],
        ),
        migrations.CreateModel(
            name="MarineModel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("createdAt", models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name="Species",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=70, verbose_name="Name")),
                (
                    "kindom",
                    models.CharField(max_length=20, null=True, verbose_name="Kingdom"),
                ),
                (
                    "phylum",
                    models.CharField(max_length=20, null=True, verbose_name="Phylum"),
                ),
                (
                    "clss",
                    models.CharField(max_length=20, null=True, verbose_name="Class"),
                ),
                (
                    "order",
                    models.CharField(max_length=20, null=True, verbose_name="Order"),
                ),
                (
                    "family",
                    models.CharField(max_length=70, null=True, verbose_name="Family"),
                ),
                (
                    "genus",
                    models.CharField(max_length=20, null=True, verbose_name="Genus"),
                ),
                (
                    "scientificName",
                    models.CharField(
                        max_length=70, null=True, verbose_name="Scientific Name"
                    ),
                ),
                (
                    "groupBehavior",
                    models.CharField(
                        max_length=70, null=True, verbose_name="Group Behavior"
                    ),
                ),
                (
                    "mostDistinctiveFeature",
                    models.CharField(
                        max_length=70,
                        null=True,
                        verbose_name="Most Distinctive Feature",
                    ),
                ),
                (
                    "distinctiveFeature",
                    models.CharField(
                        max_length=100, null=True, verbose_name="Distinctive Feature"
                    ),
                ),
                (
                    "otherName",
                    models.CharField(
                        max_length=20, null=True, verbose_name="Other Name(s)"
                    ),
                ),
                (
                    "gestationPeriod",
                    models.CharField(
                        max_length=20, null=True, verbose_name="Gestation Period"
                    ),
                ),
                (
                    "nameOfYoung",
                    models.CharField(
                        max_length=30, null=True, verbose_name="Name of Young"
                    ),
                ),
                (
                    "habitat",
                    models.CharField(max_length=50, null=True, verbose_name="Habitat"),
                ),
                (
                    "diet",
                    models.CharField(
                        max_length=10, null=True, verbose_name="Diet Type"
                    ),
                ),
                (
                    "favFood",
                    models.CharField(
                        max_length=50, null=True, verbose_name="Favorite Food"
                    ),
                ),
                (
                    "slogan",
                    models.CharField(max_length=50, null=True, verbose_name="Slogan"),
                ),
                (
                    "color",
                    models.CharField(max_length=50, null=True, verbose_name="Color"),
                ),
                (
                    "skinType",
                    models.CharField(
                        max_length=30, null=True, verbose_name="Skin Type"
                    ),
                ),
                (
                    "lifestyle",
                    models.CharField(
                        max_length=50, null=True, verbose_name="Life Style"
                    ),
                ),
                (
                    "lifespan",
                    models.CharField(
                        max_length=50, null=True, verbose_name="Life Span"
                    ),
                ),
                (
                    "topSpeed",
                    models.CharField(
                        max_length=20, null=True, verbose_name="Top Speed"
                    ),
                ),
                (
                    "sexualMaturity",
                    models.CharField(
                        max_length=50, null=True, verbose_name="Sexual Maturity"
                    ),
                ),
                (
                    "ageOfWeaning",
                    models.CharField(
                        max_length=50, null=True, verbose_name="Age of Weaning"
                    ),
                ),
                (
                    "length",
                    models.CharField(max_length=50, null=True, verbose_name="Length"),
                ),
                (
                    "weight",
                    models.CharField(max_length=50, null=True, verbose_name="Weight"),
                ),
                ("prey", models.JSONField(null=True, verbose_name="Prey")),
                (
                    "biggestThreat",
                    models.JSONField(null=True, verbose_name="Biggest Threat"),
                ),
                ("predators", models.JSONField(null=True, verbose_name="Predators")),
                (
                    "avgLitSize",
                    models.IntegerField(
                        max_length=100, null=True, verbose_name="Average Litter Size"
                    ),
                ),
                (
                    "numOfSpecies",
                    models.IntegerField(
                        max_length=100, null=True, verbose_name="Number of Species"
                    ),
                ),
                (
                    "popSize",
                    models.BigIntegerField(
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(1000000000000),
                        ],
                        verbose_name="Estimated Population Size",
                    ),
                ),
                (
                    "optimumPhLvl",
                    models.SmallIntegerField(
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(14),
                        ],
                        verbose_name="Optimum Ph Level",
                    ),
                ),
                (
                    "conmea",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="aquadex.conservationmeasures",
                    ),
                ),
                (
                    "heatMap",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="aquadex.heatmaps",
                    ),
                ),
                (
                    "img",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="aquadex.images",
                    ),
                ),
                (
                    "status",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="aquadex.endangeredstatus",
                    ),
                ),
            ],
        ),
    ]
